#include "WPILib.h"

#define JOYSTICK_DEADBAND (0.1)
//#define M_AUTO_STOP (0)
//#define M_AUTO_DRIVE_ONE (1)
//#define M_AUTO_LIFT (2)
#define M_AUTO_DRIVE_TWO (3)
#define M_AUTO_DROP (4)
#define M_MONTANA (0) 	  // ON STATE
#define M_CALIFORNIA (1) // OFF STATE
#define M_NOAH (2)	// NOTHING TO US
//the scissors lift will be named Lizard Lift in the code
//the game pad controller will be named Ben in the code


/**
 * This is a demo program showing how to use Mecanum control with the RobotDrive class.
 */
class Robot: public IterativeRobot {
	// Channels for the wheels
	RobotDrive robotDrive; // robot drive system (tankdrive uses 2 encoders)
	Joystick m_RichardRightStick;			//Richard= right joystick
	Joystick m_AaronLeftStick;			//Aaron= left joystick
	Talon m_lizardLiftMotor;					//the scissor lift motor
	DigitalInput m_topLimitSwitch;
	DigitalInput m_bottomLimitSwitch;
	AnalogInput m_sonicAlex;			//ultra sonic sensor when we use this later put m_sonicAlex.Get()    Operates from 2.5-5.5V
	Joystick m_benController;			//this is the game controller
	Talon  m_leftLauncherMotor; 		// left launcher  motor
	Talon m_rightLauncherMotor; 		//right launcher motor
	Talon m_winchMotor;					//the winch motor
	Talon m_elevMotor;					// elevation for shooter (encoder)
	DigitalInput m_lizardLimitSwitch;	//the lizard lift top limit switch



	Timer m_timer;

	//RobotDrive robotDrive;	// robot drive system
	int m_autoCase = M_CALIFORNIA;
	int m_counter =0;
	const static int LeftTrackChannel = 1;		//LeftTrackChannel motor
	const static int RightTrackChannel = 0;		//RightTrackChannel motor




	Encoder *enc;
	double m_tempvalue = 0.0;

	CameraServer *cam;
	CameraServer *cam0;

public:
	Robot() :
		//robotDrive(LeftChannel2, LeftTrackChannel, RightChannel2, RightTrackChannel), // these must be initialized in the same order
		robotDrive(LeftTrackChannel, RightTrackChannel),
		m_RichardRightStick(0), // initialize the joystick on port 0 (right side)
		m_AaronLeftStick(1), // initialize the Joystick on port 1 (left side)
		m_lizardLiftMotor{5},	//curly braces meaning the same thing as the ( )
		m_topLimitSwitch(8),
		m_bottomLimitSwitch(9),
		m_sonicAlex(2),
		m_benController(2),
		m_leftLauncherMotor(3),
		m_rightLauncherMotor(2),
		m_winchMotor(6),
		m_elevMotor(4),
		m_lizardLimitSwitch(6)

		{
			robotDrive.SetExpiration(0.1);	//Number of seconds it takes to timeout
			robotDrive.SetInvertedMotor(RobotDrive::kRearRightMotor, true);	// invert the left side motors
			robotDrive.SetInvertedMotor(RobotDrive::kRearLeftMotor, true);// you may need to change or remove this to match your robot

			enc = new Encoder(4, 5, false, Encoder::EncodingType::k4X);	//first two equal port numbers
			// enc->SetMaxPeriod(0.1);  (Not needed)
			enc->SetMinRate(10);
			enc->SetDistancePerPulse(5);
			enc->SetReverseDirection(true);
			enc->SetSamplesToAverage(7);

			cam= CameraServer::GetInstance();
			cam->SetQuality(50);
			cam->StartAutomaticCapture("cam2");
			//   http://roborio-4243-frc.local/ must use Internet Explorer to find where
			//this is located at while connected to the robo rio
			//the camera name (ex "cam0") can be found through the roborio web interface
			//CameraServer::GetInstance()->StartAutomaticCapture("cam1");
			//takes around 40 seconds to come up.
			// sometimes need to delete the usb webcam box and put a new one in place of it
			// go chance that we will have to lower the resolution for competition
			cam0= CameraServer::GetInstance();
			cam0->SetQuality(50);
			cam0->StartAutomaticCapture("cam1");



		}

		/**
		 * Runs the motors with Mecanum drive.
		 */
		void AutonomousInit() {
			m_timer.Reset();
			m_timer.Start();
			//	m_autoDriveTimer = SmartDashboard::GetNumber("Autonomous Drive Timer", 4.0);
			//	SmartDashboard::PutNumber("Autonomous Drive Timer", m_autoDriveTimer);
			m_autoCase =  M_MONTANA;
		}

		/*void DisabledInit(){
	 m_disabled=true;
	 }

	 void DisabledPeriodic(){
	 m_disabled=true;
	 SmartDashboard::PutBoolean("Disabled",m_disabled);
	 }*/

		void AutonomousPeriodic() {
			if (m_counter >= 4) {				//does the counter equal 4?
				m_autoCase = M_NOAH;
			}
			if (m_autoCase ==M_MONTANA) {	  // does it equal MONTANA?
				if (m_timer.Get() <= 3.0) {  //the robot is on for 3 seconds
					robotDrive.TankDrive(0.266, 0.266);			//first number is the smaller motor, the second number is the bigger motor
				}
				else {
					m_autoCase = M_CALIFORNIA;
				}
			}
			if (m_autoCase == M_CALIFORNIA) {						//does it equal CALIFORNIA?
				if (m_timer.Get() > 3.0 && m_timer.Get() <= 4.5) { // the robot will be off for 1.5 seconds
					robotDrive.TankDrive(0.0, 0.0);
				}
				else {
					m_timer.Reset ();
					m_autoCase = M_MONTANA;
					m_counter = m_counter +1;
				}
			}
			if (m_autoCase == M_NOAH) {
				robotDrive.TankDrive(0.0, 0.0);
				// NO QUIT GO HOME TRATORS NOT UP FOR DBAT8
			}
		}
		void TeleopInit() {

			SmartDashboard::PutNumber("distance per pulse 1 ", m_tempvalue);
			//this has to be here in order to get PutNumber to work in teleop periodic
		}

		void TeleopPeriodic() {


			SmartDashboard::PutNumber("encoder count ", enc->Get());
			m_tempvalue = SmartDashboard::GetNumber("distance per pulse 1 ", -1.0);
			//default is negative to make it easy to see
			//this has to be the same label in teleop init
			//SmartDashboard::PutNumber("distance per pulse ", m_tempvalue);
			enc->SetDistancePerPulse(m_tempvalue);
			SmartDashboard::PutNumber("encoder direction ", enc->GetDirection());
			SmartDashboard::PutNumber("encoder distance ", enc->GetDistance());

			SmartDashboard::PutNumber("red button ", m_benController.GetRawButton(2));
			SmartDashboard::PutNumber("right x ", m_benController.GetRawAxis(4));

			SmartDashboard::PutNumber("bottomLimitSwitch ", m_bottomLimitSwitch.Get() );
			SmartDashboard::PutNumber("topLimitSwitch ", m_topLimitSwitch.Get() );

			SmartDashboard::PutNumber("lizard lift speed ", m_lizardLiftMotor.Get()) ;

			SmartDashboard::PutNumber("ultraSonicSensor ",m_sonicAlex.GetVoltage());
			//   http://www.maxbotix.com/articles/032.htm
			//how to translate voltage to distance.

			//SmartDashboard::PutNumber("m_sonicAlex",4.0);
			//system.out.Println(m_sonicAlex.GetVoltage());
			//robotDrive.TankDrive(m_RichardRightStick, m_AaronLeftStick);

			/*
			if (m_sonicAlex.GetVoltage() > 0.3) {

			}
			else {
				robotDrive.TankDrive(0.0, 0.0);
			}
			 */
			// tankdrive
			robotDrive.TankDrive(m_RichardRightStick, m_AaronLeftStick);
			// lizard lift
			if (m_benController.GetRawButton(3)) { //lizard lift going up if the yellow button is pressed and the limit switch not pressed
				//If yellow button(Y) is pressed it will go up on a Tuesday
				if (m_lizardLimitSwitch.Get()) {
					//If the top limit switch is not pressed
					m_lizardLiftMotor.SetSpeed(0.25);//Run lizard lift motor at a quarter power
				}
				else {		//If top limit switch is pressed
					m_lizardLiftMotor.SetSpeed(0.0);		//Stop launcher motor
				}
			}
			else if (m_benController.GetRawButton(0)  ) {
				//If green button (A) is pressed it will go down in the dm
				m_lizardLiftMotor.SetSpeed(-0.25 );
			}
			else {
				//need to handle the deadband
				m_elevMotor.SetSpeed(0.0);
			}

			// winch
			if (m_benController.GetPOV(0) == 0) {
				//If up directional button is pressed it will go up town funk
				m_winchMotor.SetSpeed(0.25);//Run lizard lift motor at a quarter power
			}
			else if (m_benController.GetPOV(0) == 180) {
				//If down directional button is pressed it will go down in history
				m_winchMotor.SetSpeed(-0.25 );
			}
			else {
				m_winchMotor.SetSpeed(0.0);
			}

			// launcher rotation direction
			if (m_benController.GetRawButton(4)) { //this will load a boulder
				//If the left bumper is pressed it will rotate back towards the robot
				m_leftLauncherMotor.SetSpeed(-0.25);//Run lefty launcher motor at a quarter power
				m_rightLauncherMotor.SetSpeed(0.25);//Run righty launcher motor at a quarter power
			}

			else if (m_benController.GetRawButton(5)  ) { // this will shoot the boulder
				//If the right bumper is pressed it will rotate away from the robot
				m_leftLauncherMotor.SetSpeed(0.25);//Run lefty launcher motor at a quarter power
				m_rightLauncherMotor.SetSpeed(-0.25);//Run righty launcher motor at a quarter power
			}
			else {

				m_leftLauncherMotor.SetSpeed(0.0);//Run lefty launcher motor at a quarter power
				m_rightLauncherMotor.SetSpeed(0.0);//Run righty launcher motor at a quarter power
			}

			// shooter(servo)


			//this is for the Launcher
			if (m_benController.GetRawAxis(1) < -JOYSTICK_DEADBAND) { //need to declaring vars.
				//If joystick is pushed away from the operator along the Y axis
				//Deadband (0.1) used to prevent unwanted movement
				if (m_topLimitSwitch.Get()) {
					//If the top limit switch is not pressed
					m_elevMotor.SetSpeed(0.25 * (m_benController.GetRawAxis(1)));//Run elevation motor at a quarter power
				}
				else {		//If top limit switch is pressed
					m_elevMotor.SetSpeed(0.0);		//Stop launcher motor
				}
			}
			else if (m_benController.GetRawAxis(1)  > JOYSTICK_DEADBAND) {
				//If joystick is pulled towards operator along the Y axis
				//Deadband (0.1) used to prevent unwanted movement
				if (m_bottomLimitSwitch.Get()) {
					//If bottom limit switch is not pressed
					//Switch normally open
					m_elevMotor.SetSpeed(0.25 * (m_benController.GetRawAxis(1) ));
				}
				else {
					m_elevMotor.SetSpeed(0.0);
				}
			}
			else {
				//need to handle the deadband
				m_elevMotor.SetSpeed(0.0);
			}	//end if outside deadband -- else


		}

};

START_ROBOT_CLASS(Robot)
